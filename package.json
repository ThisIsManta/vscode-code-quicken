{
    "name": "haste",
    "displayName": "Haste",
    "description": "Create your file-based powerful snippets.",
    "version": "0.0.1",
    "author": "Anantachai Saothong",
    "publisher": "thisismanta",
    "categories": [
        "Snippets"
    ],
    "keywords": [
        "import",
        "export",
        "require",
        "javascript",
        "typescript",
        "file",
        "node",
        "module"
    ],
    "repository": {
        "url": "https://github.com/ThisIsManta/vscode-haste"
    },
    "bugs": {
        "url": "https://github.com/ThisIsManta/vscode-haste/issues"
    },
    "icon": "icon.png",
    "galleryBanner": {
        "color": "#283593",
        "theme": "light"
    },
    "engines": {
        "vscode": "^1.10.0"
    },
    "activationEvents": [
        "onCommand:haste"
    ],
    "main": "./dist/extension",
    "contributes": {
        "configuration": {
            "title": "Haste",
            "properties": {
                "haste.files": {
                    "type": "array",
                    "description": "An object containing file constraints.",
                    "items": {
                        "type": "object",
                        "required": [
                            "path"
                        ],
                        "properties": {
                            "path": {
                                "type": [
                                    "string",
                                    "array"
                                ],
                                "items": {
                                    "type": "string"
                                },
                                "description": "A glob pattern of files to be listed in the quick pick.\nSpecifying an exclamation mark (!) in front of the pattern will exclude those files from the list."
                            },
                            "when": {
                                "type": "string",
                                "description": "A JavaScript boolean expression to control when this pattern is available against the current viewing document."
                            },
                            "code": {
                                "type": [
                                    "string",
                                    "array"
                                ],
                                "description": "An ES6 template string to be inserted to the current viewing document."
                            },
                            "omitIndexInSelectFilePath": {
                                "type": "boolean",
                                "description": "A boolean to control whether a file named `index` must not present in the variable `selectFilePath` of `code` setting.",
                                "default": false
                            },
                            "omitExtensionInSelectFilePath": {
                                "type": [
                                    "boolean",
                                    "string"
                                ],
                                "description": "A boolean or glob pattern of file extensions to remove from `selectFilePath` variable of `code` setting.\nSpecifying `true` will strip all extension from `selectFilePath` variable of `code` setting.",
                                "default": false
                            },
                            "insertAt": {
                                "enum": [
                                    "beforeFirstImport",
                                    "afterLastImport",
                                    "top",
                                    "bottom",
                                    "cursor"
                                ],
                                "description": "A position of code to be inserted to the current viewing document.",
                                "default": "cursor"
                            }
                        }
                    },
                    "default": [
                        {
                            "path": "**/*.js",
                            "code": "import ${selectFileHasDefaultExport ? '' : '* as '}${getProperVariableName(selectFileInfo.fileNameWithoutExtension)} from '${selectFilePath}';\n",
                            "insertAt": "beforeFirstImport"
                        },
                        {
                            "path": "**/*.styl",
                            "when": "activeDocument.languageId === 'stylus'",
                            "code": "@import '${selectFilePath}'\n"
                        }
                    ]
                },
                "haste.nodes": {
                    "type": "array",
                    "description": "An object containing node module constraints.",
                    "items": {
                        "type": "object",
                        "required": [
                            "name"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "A glob pattern of node module name."
                            },
                            "code": {
                                "type": [
                                    "string",
                                    "array"
                                ],
                                "description": "A snippet to be inserted to the current viewing document."
                            },
                            "insertAt": {
                                "enum": [
                                    "beforeFirstImport",
                                    "afterLastImport",
                                    "top",
                                    "bottom",
                                    "cursor"
                                ],
                                "description": "A position of code to be inserted to the current viewing document.",
                                "default": "cursor"
                            }
                        }
                    },
                    "default": [
                        {
                            "name": "*",
                            "code": "import ${getProperVariableName(moduleName)} from '${moduleName}';\n"
                        }
                    ]
                },
                "haste.javascript.parser.plugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of plug-in names for Babylon JavaScript parser.\nSee also https://www.npmjs.com/package/babylon#plugins",
                    "default": [
                        "jsx",
                        "flow",
                        "doExpressions",
                        "objectRestSpread",
                        "decorators",
                        "classProperties",
                        "exportExtensions",
                        "asyncGenerators",
                        "functionBind",
                        "functionSent",
                        "dynamicImport"
                    ]
                }
            }
        },
        "commands": [
            {
                "command": "haste",
                "title": "Inserts a powerful file-based snippet"
            }
        ],
        "keybindings": [
            {
                "command": "haste",
                "key": "ctrl+shift+i"
            }
        ]
    },
    "scripts": {
        "postinstall": "node ./node_modules/vscode/bin/install",
        "compile": "tsc -watch --project ./",
        "vscode:prepublish": "tsc --project ./"
    },
    "devDependencies": {
        "@types/babylon": "^6.7.15",
        "@types/lodash": "^4.14.54",
        "@types/minimatch": "^2.0.29",
        "@types/node": "^6.0.40",
        "typescript": "^2.0.3",
        "vscode": "^1.0.0"
    },
    "dependencies": {
        "babylon": "^6.16.1",
        "lodash": "^4.17.4",
        "minimatch": "^3.0.3"
    }
}